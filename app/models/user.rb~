class User < ActiveRecord::Base
    include RatingAverage

	has_secure_password


	PASSWORD_FORMAT = /\A
 	 (?=.{4,})          
 	 (?=.*\d)           
 	 (?=.*[A-Z])
	/x

    validates :username, uniqueness: true
    validates :username, length: { minimum: 3 }
    validates :username, length: { maximum: 15 }
    validates :password, format: {with: PASSWORD_FORMAT}    
	
    has_many :ratings, dependent: :destroy
    has_many :raters, -> { uniq }, through: :ratings, source: :user
    has_many :memberships
    has_many :beer_clubs, through: :memberships

    def count
	return ratings.count
    end

    def favorite_beer
       return nil if ratings.empty?
    ratings.order(score: :desc).limit(1).first.beer
    end

    def ratings_having_styles
        return nil if ratings.empty?
    ratings.beer.select{ |a| a.beer.style }
    end

    def favorite_style
        return nil if ratings.empty?
	sum = {}
	amount = {}
	ratings.each do |rating|
	  s = rating.beer.style
	  if not sum.has_key?(s)
	    sum[s] = rating.score
	    amount[s] = 1
	  else
	    vanhaluku = sum[s]
	    sum[s] = vanhaluku + rating.score
	    vanhamaara = amount[s]
	    amount[s] = vanhamaara + 1
	  end
	end
	  highest = 0
	  hstyle = nil
	  sum.each do |r|
		if (sum[r.first].to_f / amount[r.first].to_f) > highest
		  highest = sum[r.first].to_f / amount[r.first].to_f
		  hstyle = sum.index(sum[r.first])
	  	end
	  end
	return hstyle
	end

    def favorite_brewery
        return nil if ratings.empty?
	sum = {}
	amount = {}
	ratings.each do |rating|
	  s = rating.beer.brewery
	  if not sum.has_key?(s)
	    sum[s] = rating.score
	    amount[s] = 1
	  else
	    vanhaluku = sum[s]
	    sum[s] = vanhaluku + rating.score
	    vanhamaara = amount[s]
	    amount[s] = vanhamaara + 1
	  end
	end
	  highest = 0
	  hbrewery = nil
	  sum.each do |r|
		if (sum[r.first].to_f / amount[r.first].to_f) > highest
		  highest = sum[r.first].to_f / amount[r.first].to_f
		  hbrewery = sum.index(sum[r.first])
	  	end
	  end
	return hbrewery
	end
end
